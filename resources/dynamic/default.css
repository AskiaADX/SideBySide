{%
Dim controlAlign
If (CurrentADC.PropValue("controlAlign") = "center" ) Then
    controlAlign = "0 auto"
ElseIf (CurrentADC.PropValue("controlAlign") = "right" ) Then
    controlAlign = "0 0 0 auto"
Else
    controlAlign = "0 auto 0 0"
EndIf
Dim firstColumnWidth = CurrentADC.PropValue("firstColumnWidth")
%}
#adc_{%= CurrentADC.InstanceId %} {
    margin: {%= controlAlign %};
    max-width: {%= CurrentADC.PropValue("controlWidth") %};
}
#adc_{%= CurrentADC.InstanceId %} .adc-sidebyside-table {
    {% If (CurrentADC.PropValue("sameSize") = "1") Then %}
        table-layout: fixed;
    {% EndIf %}
}
#adc_{%= CurrentADC.InstanceId %} th.otherColumn {
	z-index: 3;
    position: relative;
    background-color: rgb({%= Theme.WhiteColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} th.firstColumn {
	z-index: -1;
    position: relative;
    background-color: rgb({%= Theme.WhiteColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} th:first-child, 
#adc_{%= CurrentADC.InstanceId %} td:first-child {
    width: {%= firstColumnWidth + "%" %};
}
#adc_{%= CurrentADC.InstanceId %} tbody tr:hover td {
    {% If (CurrentADC.PropValue("hightlightRowOnHover") = "yes") Then %}
    background-color: rgba({%= Theme.BlackColor.ToRGB() %},.1);
    {% EndIf %}
}
#adc_{%= CurrentADC.InstanceId %} .aboveLimit {
    color: rgba({%= CurrentADC.PropValue("maxLimitExceededColor") %},1);
}
#adc_{%= CurrentADC.InstanceId %} .equalLimit {
    color: rgba({%= CurrentADC.PropValue("maxLimReachedColor") %},1);
}
#adc_{%= CurrentADC.InstanceId %} td:not(.cell-selected).response:hover {
    background-color: rgba({%= Theme.BlackColor.ToRGB() %},.1);
}
#adc_{%= CurrentADC.InstanceId %} .selected,
#adc_{%= CurrentADC.InstanceId %} .cell-selected {
    background-color: rgba({%= Theme.SecondaryColor.ToRGB() %},1) !important;
}
{% If CurrentADC.PropValue("respOnHeader") = "0" Then %}
    #adc_{%= CurrentADC.InstanceId %} label.askia-radio{
        display:none;
    }
    #adc_{%= CurrentADC.InstanceId %} label.askia-checkbox{
        display:none;
    }
	#adc_{%= CurrentADC.InstanceId %} label.text{
        cursor:pointer;
    }
    #adc_{%= CurrentADC.InstanceId %} .response {
        cursor:pointer;
    }
    #adc_{%= CurrentADC.InstanceId %} .number-element {
        display: flex;
        align-items: baseline;
    }
{%EndIf%}
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker select {
    color: rgba({%= Theme.BlackColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker,
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker option {
    color: rgba({%= Theme.BlackColor %}) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId %} .timeSeparator_{%= CurrentADC.InstanceId %} {
    line-height: 2;
}
#picker{%= CurrentADC.InstanceId %} .is-today .pika-button {
    color: rgba({%= Theme.SecondaryColor %}) !important;
}
#picker{%= CurrentADC.InstanceId %} .is-selected .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-inrange .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-startrange .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-endrange .pika-button {
    background-color: rgba({%= Theme.SecondaryColor %}) !important;
    color: rgba(255,255,255,1) !important;
}
#picker{%= CurrentADC.InstanceId %} .pika-button:hover {
    background-color: rgba({%= Theme.PrimaryColor %}) !important;
    color: rgba(255,255,255,1) !important;
}
